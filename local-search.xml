<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【解题报告】Codeforces Round #697 (Div. 3)</title>
    <link href="/2021/01/29/CF697-3/"/>
    <url>/2021/01/29/CF697-3/</url>
    
    <content type="html"><![CDATA[<h1 id="【解题报告】Codeforces-Round-697-Div-3"><a href="#【解题报告】Codeforces-Round-697-Div-3" class="headerlink" title="【解题报告】Codeforces Round #697 (Div. 3)"></a>【解题报告】<a href="https://codeforces.com/contest/1475">Codeforces Round #697 (Div. 3)</a></h1><h2 id="A-Odd-Divisor"><a href="#A-Odd-Divisor" class="headerlink" title="A.Odd Divisor"></a><a href="https://codeforces.com/contest/1475/problem/A">A.Odd Divisor</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>问整数$n$是否有大于$1$的奇因子</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>若一个数不含奇因子，那么这个数是$2$的幂，因此只需判断数$n$是否为$2$的幂次即可，起初我是计算的<code>n-(n&amp;-n)</code>虽然能通过但是看了其他人的提交，有更加巧妙地方式，即<code>n&amp;(n-1)</code></p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> T;<br>  <span class="hljs-built_in">cin</span> &gt;&gt; T;<br>  <span class="hljs-keyword">while</span> (T--) &#123;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">if</span> (n - (n &amp; -n))<br>      <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B-New-Year’s-Number"><a href="#B-New-Year’s-Number" class="headerlink" title="B.New Year’s Number"></a><a href="https://codeforces.com/contest/1475/problem/B">B.New Year’s Number</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定整数$n$，问是否恰好可以拆分为若干个$2020$及$2021$</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>$n$对$2020$取余，余数即为$2021$的个数，若余数大于除数，则无法拆分</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> T;<br>  <span class="hljs-built_in">cin</span> &gt;&gt; T;<br>  <span class="hljs-keyword">while</span> (T--) &#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">int</span> a = n / <span class="hljs-number">2020</span>, b = n % <span class="hljs-number">2020</span>;<br>    <span class="hljs-keyword">if</span> (a &gt;= b)<br>      <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="C-Ball-in-Berland"><a href="#C-Ball-in-Berland" class="headerlink" title="C.Ball in Berland"></a><a href="https://codeforces.com/contest/1475/problem/C">C.Ball in Berland</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给定$a,b,k$及$k$个数对，问从中挑出两个数对$(a,b),(c,d)$，且$a\ne c &amp;&amp;b\ne d$的方案数</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>统计数对$(x,y)$中$x,y$的出现次数，暴力求出不冲突的即可</p><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> T;<br>  <span class="hljs-built_in">cin</span> &gt;&gt; T;<br>  <span class="hljs-keyword">while</span> (T--) &#123;<br>    <span class="hljs-keyword">int</span> a, b, k;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; k;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; p(k);<br>    vector&lt;int&gt; A(a + 1), B(b + 1);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>      <span class="hljs-built_in">cin</span> &gt;&gt; p[i].first;<br>      A[p[i].first]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>      <span class="hljs-built_in">cin</span> &gt;&gt; p[i].second;<br>      B[p[i].second]++;<br>    &#125;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>      ans += k - A[p[i].first] - B[p[i].second] + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; (ans &gt;&gt; <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="D-Cleaning-the-Phone"><a href="#D-Cleaning-the-Phone" class="headerlink" title="D.Cleaning the Phone"></a><a href="https://codeforces.com/contest/1475/problem/D">D.Cleaning the Phone</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>$n$个应用内存占用为$a_i$，重要程度为$b_i\epsilon{1,2}$，要使得内存占用降低$m$，卸载一些应用，使得减少的重要程度最小</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>按重要程度将应用分成两类并排序，暴力枚举两类应用卸载的数量可以求得结果，为降低复杂度，可以采取双指针，第一类应用全部不卸载，第二类全卸载，优化结果即可</p><h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> T;<br>  <span class="hljs-built_in">cin</span> &gt;&gt; T;<br>  <span class="hljs-keyword">while</span> (T--) &#123;<br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; a, b;<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> &amp;it : v) &#123;<br>      <span class="hljs-built_in">cin</span> &gt;&gt; it;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> &amp;it : v) &#123;<br>      <span class="hljs-keyword">int</span> x;<br>      <span class="hljs-built_in">cin</span> &gt;&gt; x;<br>      <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) &#123;<br>        a.push_back(it);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        b.push_back(it);<br>      &#125;<br>    &#125;<br>    sort(a.rbegin(), a.rend());<br>    sort(b.rbegin(), b.rend());<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> sumA = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> r = (<span class="hljs-keyword">int</span>)b.size();<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> sumb = accumulate(b.begin(), b.end(), <span class="hljs-number">0ll</span>);<br>    <span class="hljs-keyword">int</span> ans = INT_MAX;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>; l &lt;= a.size(); l++) &#123;<br>      <span class="hljs-keyword">while</span> (r &gt; <span class="hljs-number">0</span> &amp;&amp; sumA + sumb - b[r - <span class="hljs-number">1</span>] &gt;= m) &#123;<br>        r--;<br>        sumb -= b[r];<br>      &#125;<br>      <span class="hljs-keyword">if</span> (sumb + sumA &gt;= m) &#123;<br>        ans = min(ans, <span class="hljs-number">2</span> * r + l);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (l != a.size()) &#123;<br>        sumA += a[l];<br>      &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; (ans == INT_MAX ? <span class="hljs-number">-1</span> : ans) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="E-Advertising-Agency"><a href="#E-Advertising-Agency" class="headerlink" title="E.Advertising Agency"></a><a href="https://codeforces.com/contest/1475/problem/E">E.Advertising Agency</a></h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>$n$个数中选出$k$个，使得总和最大，问有多少种选法</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>从大到小选$k$个数，求出这$k$个数中最小的数的个数$ncnt$及被选中次数$ncnt-cnt+k$，求其组合数即可</p><h3 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> C[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000</span>; i++) &#123;<br>    C[i][<span class="hljs-number">0</span>] = C[i][i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j++) &#123;<br>      C[i][j] = (C[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + C[i - <span class="hljs-number">1</span>][j]) % <span class="hljs-number">1000000007</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  init();<br>  <span class="hljs-keyword">int</span> T;<br>  <span class="hljs-built_in">cin</span> &gt;&gt; T;<br>  <span class="hljs-keyword">while</span> (T--) &#123;<br>    <span class="hljs-keyword">int</span> n, k;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, t; i &lt; n; i++) &#123;<br>      <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>      q.push(t);<br>    &#125;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>, last = <span class="hljs-number">-1</span>, ncnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>      <span class="hljs-keyword">if</span> (q.top() != last) &#123;<br>        <span class="hljs-keyword">if</span> (cnt &gt;= k) <span class="hljs-keyword">break</span>;<br>        last = q.top();<br>        ncnt = <span class="hljs-number">0</span>;<br>      &#125;<br>      ncnt++, cnt++;<br>      q.pop();<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; C[ncnt][cnt - k] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>解题报告</category>
      
      <category>Codeforces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【解题报告】剑指 Offer 10- I. 斐波那契数列</title>
    <link href="/2021/01/25/JZ-Offer-10-I/"/>
    <url>/2021/01/25/JZ-Offer-10-I/</url>
    
    <content type="html"><![CDATA[<h1 id="【解题报告】剑指-Offer-10-I-斐波那契数列"><a href="#【解题报告】剑指-Offer-10-I-斐波那契数列" class="headerlink" title="【解题报告】剑指 Offer 10- I. 斐波那契数列"></a>【解题报告】剑指 Offer 10- I. 斐波那契数列</h1><h3 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">题目地址</a></h3><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求斐波那契数列</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>由于$n\epsilon[0,100]$，裸递归必超时，开个数组递推即可</p><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>矩阵快速幂</p><p>设$X_n=[a_n,a_{n-1}]$，其边界$X_1=[a_1,a_0]=[1,0]$，记$A=[1,1;1,0]$，有$X_n=X_{n-1}A$，所以$X_n=X_1A^{n-1}$，因此先用快速幂求出$A^{n-1}%P$即可</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><h4 id="方法1代码"><a href="#方法1代码" class="headerlink" title="方法1代码"></a>方法1代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ans = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>      ans.push_back((ans[i - <span class="hljs-number">1</span>] + ans[i - <span class="hljs-number">2</span>]) % <span class="hljs-number">1000000007</span>);<br>    <span class="hljs-keyword">return</span> ans[n];<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="方法2代码"><a href="#方法2代码" class="headerlink" title="方法2代码"></a>方法2代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[][<span class="hljs-number">2</span>], <span class="hljs-keyword">int</span> b[][<span class="hljs-number">2</span>], <span class="hljs-keyword">int</span> c[][<span class="hljs-number">2</span>])</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp[][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">2</span>; k++) &#123;<br>          <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> x = temp[i][j] + (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)a[i][k] * b[k][j];<br>          temp[i][j] = x % MOD;<br>        &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++) c[i][j] = temp[i][j];<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> res[][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;&#125;;<br>    <span class="hljs-keyword">int</span> t[][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;&#125;;<br>    <span class="hljs-keyword">int</span> k = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k) &#123;<br>      <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) mul(res, t, res);<br>      mul(t, t, t);<br>      k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>解题报告</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【解题报告】剑指 Offer 09. 用两个栈实现队列</title>
    <link href="/2021/01/25/JZ-Offer-09/"/>
    <url>/2021/01/25/JZ-Offer-09/</url>
    
    <content type="html"><![CDATA[<h1 id="【解题报告】剑指-Offer-09-用两个栈实现队列"><a href="#【解题报告】剑指-Offer-09-用两个栈实现队列" class="headerlink" title="【解题报告】剑指 Offer 09. 用两个栈实现队列"></a>【解题报告】剑指 Offer 09. 用两个栈实现队列</h1><h3 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a><a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">题目地址</a></h3><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>用两个栈实现一个队列。分别完成在队列尾部插入整数和在队列头部删除整数的功能。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>声明两个栈$sk1$和$sk2$，入队直接将数放入$sk1$即可，出队时将$sk2$栈顶元素出栈即可，若$sk2$为空则先将$sk1$总元素全部放入$sk2$中然后出栈即可，若都为空则队空</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CQueue</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; sk1, sk2;<br>  CQueue() &#123;&#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">appendTail</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123; sk1.push(value); &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteHead</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (!sk2.empty()) &#123;<br>      k = sk2.top();<br>      sk2.pop();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">while</span> (!sk1.empty()) &#123;<br>        sk2.push(sk1.top());<br>        sk1.pop();<br>      &#125;<br>      <span class="hljs-keyword">if</span> (!sk2.empty()) &#123;<br>        k = sk2.top();<br>        sk2.pop();<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> k;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>解题报告</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【解题报告】剑指 Offer 07. 重建二叉树</title>
    <link href="/2021/01/25/JZ-Offer-07/"/>
    <url>/2021/01/25/JZ-Offer-07/</url>
    
    <content type="html"><![CDATA[<h1 id="【解题报告】剑指-Offer-07-重建二叉树"><a href="#【解题报告】剑指-Offer-07-重建二叉树" class="headerlink" title="【解题报告】剑指 Offer 07. 重建二叉树"></a>【解题报告】剑指 Offer 07. 重建二叉树</h1><h3 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a><a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/">题目地址</a></h3><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>递归建树，在中序遍历中找到前序遍历的首元素，以此将中序遍历划分为三个部分，左子树、根和右子树</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; preorder, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; inorder)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (preorder.size() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    TreeNode* root = <span class="hljs-keyword">new</span> TreeNode(preorder[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; inorder.size(); i++) &#123;<br>      <span class="hljs-keyword">if</span> (root-&gt;val == inorder[i]) &#123;<br>        <span class="hljs-keyword">if</span> (i) &#123;<br>          vector&lt;int&gt; ll(preorder.begin() + 1, preorder.begin() + i + 1),<br>              lr(inorder.begin(), inorder.begin() + i);<br>          root-&gt;left = buildTree(ll, lr);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i &lt; inorder.size() - <span class="hljs-number">1</span>) &#123;<br>          vector&lt;int&gt; rl(preorder.begin() + i + 1, preorder.end()),<br>              rr(inorder.begin() + i + <span class="hljs-number">1</span>, inorder.end());<br>          root-&gt;right = buildTree(rl, rr);<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> root;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>解题报告</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【解题报告】剑指 Offer 06. 从尾到头打印链表</title>
    <link href="/2021/01/25/JZ-Offer-06/"/>
    <url>/2021/01/25/JZ-Offer-06/</url>
    
    <content type="html"><![CDATA[<h1 id="【解题报告】剑指-Offer-06-从尾到头打印链表"><a href="#【解题报告】剑指-Offer-06-从尾到头打印链表" class="headerlink" title="【解题报告】剑指 Offer 06. 从尾到头打印链表"></a>【解题报告】剑指 Offer 06. 从尾到头打印链表</h1><h3 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">题目地址</a></h3><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>将链表顺序读入数组然后调用<code>std::reverse()</code></p><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>简单递归</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><h4 id="方法1代码"><a href="#方法1代码" class="headerlink" title="方法1代码"></a>方法1代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">reversePrint</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ans;<br>    <span class="hljs-keyword">while</span> (head) &#123;<br>      ans.push_back(head-&gt;val);<br>      head = head-&gt;next;<br>    &#125;<br>    reverse(ans.begin(), ans.end());<br>    <span class="hljs-keyword">return</span> ans;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="方法2代码"><a href="#方法2代码" class="headerlink" title="方法2代码"></a>方法2代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">reversePrint</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!head) <span class="hljs-keyword">return</span> &#123;&#125;;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; a = reversePrint(head-&gt;next);<br>    a.push_back(head-&gt;val);<br>    <span class="hljs-keyword">return</span> a;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>解题报告</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【解题报告】剑指 Offer 05. 替换空格</title>
    <link href="/2021/01/22/JZ-Offer-05/"/>
    <url>/2021/01/22/JZ-Offer-05/</url>
    
    <content type="html"><![CDATA[<h1 id="【解题报告】剑指-Offer-05-替换空格"><a href="#【解题报告】剑指-Offer-05-替换空格" class="headerlink" title="【解题报告】剑指 Offer 05. 替换空格"></a>【解题报告】剑指 Offer 05. 替换空格</h1><h3 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">题目地址</a></h3><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>将字符串中每个空格替换成<code>%20</code></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>库函数一顿操作</p><div class="note note-primary">            <p><code>string::find()</code>没找到目标字符串时返回值为<code>string::npos</code></p>          </div><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">replaceSpace</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> k = s.find(<span class="hljs-string">&#x27; &#x27;</span>);<br>    <span class="hljs-keyword">while</span> (k != <span class="hljs-built_in">string</span>::npos) &#123;<br>      s.erase(s.begin() + k);<br>      s.insert(k, <span class="hljs-string">&quot;%20&quot;</span>);<br>      k = s.find(<span class="hljs-string">&#x27; &#x27;</span>, k);<br>    &#125;<br>    <span class="hljs-keyword">return</span> s;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>解题报告</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【解题报告】剑指 Offer 04. 二维数组中的查找</title>
    <link href="/2021/01/22/JZ-Offer-04/"/>
    <url>/2021/01/22/JZ-Offer-04/</url>
    
    <content type="html"><![CDATA[<h1 id="【解题报告】剑指-Offer-04-二维数组中的查找"><a href="#【解题报告】剑指-Offer-04-二维数组中的查找" class="headerlink" title="【解题报告】剑指 Offer 04. 二维数组中的查找"></a>【解题报告】剑指 Offer 04. 二维数组中的查找</h1><h3 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof">题目地址</a></h3><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在一个 $n * m$ 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>暴力遍历数组即可</p><div class="note note-primary">            <p>小心数组越界</p>          </div><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>从右上角开始检索目标值，若当前元素大于目标值时，当前元素下方所有元素必将大于目标值，往左查找才有可能找到目标值；同理，若当前元素小于目标值时，当前元素左边的所有元素必将小于目标值，往下查找才有可能找到目标值。因此当前值大于目标值时，列下标减一；当前值小于目标值时，行坐标加一，直至找到目标值。</p><div class="note note-primary">            <ul><li>小心数组越界</li><li>初始化行下标为 0，列下标为二维数组的列数减 1</li></ul>          </div><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><h4 id="方法1代码"><a href="#方法1代码" class="headerlink" title="方法1代码"></a>方法1代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">findNumberIn2DArray</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; matrix, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = matrix.size();<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> m = matrix[<span class="hljs-number">0</span>].size();<br>    <span class="hljs-keyword">if</span> (m == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>        <span class="hljs-keyword">if</span> (target == matrix[i][j]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="方法2代码"><a href="#方法2代码" class="headerlink" title="方法2代码"></a>方法2代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">findNumberIn2DArray</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; matrix, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> L = matrix.size(), C;<br>    <span class="hljs-keyword">if</span> (L)<br>      C = matrix[<span class="hljs-number">0</span>].size();<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = C - <span class="hljs-number">1</span>; i &lt; L &amp;&amp; j &gt;= <span class="hljs-number">0</span>;) &#123;<br>      <span class="hljs-keyword">if</span> (matrix[i][j] == target)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (matrix[i][j] &gt; target)<br>        j--;<br>      <span class="hljs-keyword">else</span><br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>解题报告</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【解题报告】剑指 Offer 03. 数组中重复的数字</title>
    <link href="/2021/01/22/JZ-Offer-03/"/>
    <url>/2021/01/22/JZ-Offer-03/</url>
    
    <content type="html"><![CDATA[<h1 id="【解题报告】剑指-Offer-03-数组中重复的数字"><a href="#【解题报告】剑指-Offer-03-数组中重复的数字" class="headerlink" title="【解题报告】剑指 Offer 03. 数组中重复的数字"></a>【解题报告】剑指 Offer 03. 数组中重复的数字</h1><h3 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">题目地址</a></h3><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>长度为$n$的数组中所有数字的范围都在区间$[0,n-1]$中，找出任意一个重复出现的数字，其中$n\in[2,100000]$。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>遍历数组，将数$i$放到数组的第$i$个位置上，若数$i$与数组第$i$个数上的数字相等时则发生了重复。</p><div class="note note-primary">            <p>当数字$i$恰好在数组第$i$个位置上时应跳过</p>          </div><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.size(); i++) &#123;<br>      <span class="hljs-keyword">if</span> (nums[i] == i)<br>        <span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] == nums[nums[i]])<br>        <span class="hljs-keyword">return</span> nums[i];<br>      <span class="hljs-keyword">else</span><br>        swap(nums[i], nums[nums[i]]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>解题报告</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【解题报告】AtCoder Beginner Contest 177</title>
    <link href="/2021/01/22/ABC-177/"/>
    <url>/2021/01/22/ABC-177/</url>
    
    <content type="html"><![CDATA[<h1 id="【解题报告】AtCoder-Beginner-Contest-177"><a href="#【解题报告】AtCoder-Beginner-Contest-177" class="headerlink" title="【解题报告】AtCoder Beginner Contest 177"></a>【解题报告】AtCoder Beginner Contest 177</h1><h2 id="A-Don’t-be-late"><a href="#A-Don’t-be-late" class="headerlink" title="A-Don’t be late"></a><a href="https://atcoder.jp/contests/abc177/tasks/abc177_a">A-Don’t be late</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>以$S$米每秒的速度能否在$T$秒内移动$D$米</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>判断<code>S * T &gt;= D</code>是否为真即可</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> d, t, s;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; d &gt;&gt; t &gt;&gt; s;<br>    <span class="hljs-keyword">if</span> (t * s &gt;= d)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="B-Substring"><a href="#B-Substring" class="headerlink" title="B - Substring"></a><a href="https://atcoder.jp/contests/abc177/tasks/abc177_b">B - Substring</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定字符串$S$和$T$, 至少修改$S$中的多少个字符使得$T$成为$S$的子串</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>依次将$T$与$S$中长度相等的子串进行比较, 求得其中不同的字符的数量, 输出最小的不同字符数量即可</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">string</span> s, t;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-keyword">int</span> len = s.size() - t.size();<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">100000</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; i++) &#123;<br>        <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; t.size(); j++) &#123;<br>            <span class="hljs-keyword">if</span> (t[j] != s[i + j])x++;<br>        &#125;<br>        ans = min(ans, x);<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="C-Sum-of-product-of-pairs"><a href="#C-Sum-of-product-of-pairs" class="headerlink" title="C - Sum of product of pairs"></a><a href="https://atcoder.jp/contests/abc177/tasks/abc177_c">C - Sum of product of pairs</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给定$n$个数, 求这$n$个数两两乘积之和, 并对 $1e9+7$ 取余</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>$ans=\Sigma_{i=2}^n(a_i*\Sigma_{j=1}^{i-1}a_j)$</p><p>边求前缀和, 边求乘积, 中途注意数据范围即可</p><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> a[<span class="hljs-number">200020</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        ans = ans + (a[i] * a[i - <span class="hljs-number">1</span>] % mod);<br>        a[i] += a[i - <span class="hljs-number">1</span>];<br>        a[i] %= mod;<br>        ans %= mod;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="D-Friends"><a href="#D-Friends" class="headerlink" title="D - Friends"></a><a href="https://atcoder.jp/contests/abc177/tasks/abc177_d">D - Friends</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给定$n$个人, $m$对数, 表示$m$对朋友, 朋友的朋友也是朋友, 现在对这$n$个人分组, 分组使得每个小组内的成员互相不是朋友, 最少应该分多少个组</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>维护一个带$Size$的并查集, 输出最大的$Size$即可</p><h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">200020</span>];<br><span class="hljs-keyword">int</span> si[<span class="hljs-number">200020</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ff</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a[x] = a[x] == x ? x : ff(a[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)a[i] = i, si[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">int</span> x, y;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y;<br>        x = ff(x);<br>        y = ff(y);<br>        <span class="hljs-keyword">if</span> (x != y) &#123;<br>            a[y] = x;<br>            si[x] += si[y];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ma = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        ma = max(ma, si[i]);<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ma &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="E-Coprime"><a href="#E-Coprime" class="headerlink" title="E - Coprime"></a><a href="https://atcoder.jp/contests/abc177/tasks/abc177_e">E - Coprime</a></h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>给定$n$个数, 是否满足对于任意$1\le i \le j \le n$都有$GCD(A_i,A_j)=1$, 或$GCD(A_1,A_2,\dots,A_n)=1$</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>依据$GCD(A_1,A_2,\dots,A_n)=GCD(GCD(GCD(A_1,A_2),A_3)\cdots,A_n)$判断$GCD(A_1,A_2,\dots,A_n)=1$是否成立, 若成立, 进一步判断是否满足对于任意$1\le i \le j \le n$都有$GCD(A_i,A_j)=1$, 枚举因子, 判断是否存在一个因子有复数个倍数</p><h3 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">1000010</span>];<br><span class="hljs-keyword">int</span> cnt[<span class="hljs-number">1000010</span>];<br><span class="hljs-keyword">bool</span> flag[<span class="hljs-number">1000010</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> y ? gcd(y, x % y) : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>        cnt[a[i]]++;<br>    &#125;<br>    <span class="hljs-keyword">int</span> x = gcd(a[<span class="hljs-number">1</span>], a[<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>; i &lt;= n; i++) &#123;<br>        x = gcd(x, a[i]);<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not coprime&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">1000000</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (flag[i]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt;= <span class="hljs-number">1000000</span>; j += i) &#123;<br>                t += cnt[j];<br>                flag[j] = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (t &gt; <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;setwise coprime&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pairwise coprime&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="F-I-hate-Shortest-Path-Problem"><a href="#F-I-hate-Shortest-Path-Problem" class="headerlink" title="F - I hate Shortest Path Problem"></a><a href="https://atcoder.jp/contests/abc177/tasks/abc177_f">F - I hate Shortest Path Problem</a></h2><h3 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h3><p>给定一个有$H+1$行$W$列的网格, 可以从每个网格向其下方或者右方移动, 但对于$1$至$H$行的第$A_i$到$B_i$个网格无法向下移动, 求从第1行出发往下移动$k$行所需要的最小移动步数, 若无法到达输出$-1$, 可以从第一行任意网格出发</p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>定义$edge{x,y}$, 表示从第一行第$x$个网格出发, 到达第$y$列的状态, 初始化状态$edge{i,i}$, 此时所需步数均为$0$, 对于所有$y$在区间$[A_i,B_i+1]$的状态方案,仅保留$x$最大的状态, 即删除所有$y$在区间$[A_i,B_i+1]$的状态方案, 然后插入$edge{max{x},B_i+1}$, 最终结果即为$B_i+1-max{x}+i$</p><h3 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">200020</span>], b[<span class="hljs-number">200020</span>];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span><br>    <span class="hljs-keyword">int</span> x, y;<br><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> edge &amp;t) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> y &lt; t.y;<br>    &#125;<br>&#125;;<br><br><span class="hljs-built_in">set</span>&lt;edge&gt; s;<br><span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>&gt; ms;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> h, w;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; h &gt;&gt; w;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= h; i++)<span class="hljs-built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= w; i++) &#123;<br>        s.insert(&#123;i, i&#125;);<br>        ms.insert(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= h; i++) &#123;<br>        <span class="hljs-keyword">int</span> ma = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">auto</span> u = s.lower_bound(&#123;<span class="hljs-number">0</span>, a[i]&#125;);<br>        <span class="hljs-keyword">while</span> (u != s.end() &amp;&amp; u-&gt;y &lt;= b[i] + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">auto</span> v = ms.find(u-&gt;y - u-&gt;x);<br>            ms.erase(v);<br>            ma = max(ma, u-&gt;x);<br>            u = s.erase(u);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ma &gt; <span class="hljs-number">0</span> &amp;&amp; b[i] &lt; w) &#123;<br>            s.insert(&#123;ma, b[i] + <span class="hljs-number">1</span>&#125;);<br>            ms.insert(b[i] + <span class="hljs-number">1</span> - ma);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s.empty()) &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; *(ms.begin()) + i &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>解题报告</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AtCoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【解题报告】AtCoder Beginner Contest 166</title>
    <link href="/2021/01/22/ABC-166/"/>
    <url>/2021/01/22/ABC-166/</url>
    
    <content type="html"><![CDATA[<h1 id="【解题报告】AtCoder-Beginner-Contest-166"><a href="#【解题报告】AtCoder-Beginner-Contest-166" class="headerlink" title="【解题报告】AtCoder Beginner Contest 166"></a>【解题报告】AtCoder Beginner Contest 166</h1><h2 id="A-A-C"><a href="#A-A-C" class="headerlink" title="A - A?C"></a><a href="https://atcoder.jp/contests/abc166/tasks/abc166_a">A - A?C</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>输入<code>ABC</code>则输出<code>ARC</code>，输入<code>ARC</code>则输出<code>ABC</code></p><h2 id="B-Trick-or-Treat"><a href="#B-Trick-or-Treat" class="headerlink" title="B - Trick or Treat"></a><a href="https://atcoder.jp/contests/abc166/tasks/abc166_b">B - Trick or Treat</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定$n,k$, 接下来$k$组数据, 每组数据第一行一个数$k_i$表示接下来的一行包含$k_i$个$1$至$n$的数, 统计$1$至$n$之间从未出现的数的个数</p><h2 id="C-Peaks"><a href="#C-Peaks" class="headerlink" title="C - Peaks"></a><a href="https://atcoder.jp/contests/abc166/tasks/abc166_c">C - Peaks</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>有n个天文台, 高度为h, m条路径, 统计符合以下条件的天文台数量: 与该天文台有直接相连的路径的天文台高度均低于它. </p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于一条路径两端的两个天文台, 其中高度较低的一定不需要统计, 故对每条路径排除掉较低的端点, 注意高度相等时两个端点都应该排除</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll ;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> h[N];<br><span class="hljs-keyword">bool</span> flag[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m;<span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">cin</span> &gt;&gt; h[i];<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-keyword">int</span> a,b ;<span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-keyword">if</span>(h[a]==h[b])flag[a]=flag[b]=<span class="hljs-number">1</span>;<br>        flag[h[a]&gt;h[b]?b:a]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(!flag[i])ans++;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="D-I-hate-Factorization"><a href="#D-I-hate-Factorization" class="headerlink" title="D - I hate Factorization"></a><a href="https://atcoder.jp/contests/abc166/tasks/abc166_d">D - I hate Factorization</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>已知$X$, 求一组$A,B$ 满足$A^5-B^5=X$, 解一定存在</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>易知, 当$|A|$越大,$|A-B|$会接近$1$, 注意到$X&lt;10^9$,有$-300&lt;A,B&lt;300$, 因此枚举即可</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll ;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ll x;<span class="hljs-built_in">cin</span> &gt;&gt; x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">-300</span>;i&lt;=<span class="hljs-number">300</span>;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">-300</span>;j&lt;=<span class="hljs-number">300</span>;j++)&#123;<br>            ll m=i*i,n=j*j;<br>            <span class="hljs-keyword">if</span>(m*m*i-n*n*j==x)&#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; j &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="E-This-Message-Will-Self-Destruct-in-5s"><a href="#E-This-Message-Will-Self-Destruct-in-5s" class="headerlink" title="E - This Message Will Self-Destruct in 5s"></a><a href="https://atcoder.jp/contests/abc166/tasks/abc166_e">E - This Message Will Self-Destruct in 5s</a></h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>给定数组$A_i$, 求满足$|i-j|=A_i+A_j$的数对个数</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>设$j&gt;i$, 等式变成$j-A_j=A_i+i$, 统计$j-A_j$个数, 依次加上$A_i+i$的个数即可, 由于要满足$j&gt;i$, 每次需减少一个$i-A_i$ </p><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll ;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">200020</span>;<br><span class="hljs-keyword">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; mp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>        mp[i-a[i]]++;<br>    &#125;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        mp[i-a[i]]--;<br>        ans+=mp[i+a[i]];<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="F-Three-Variables-Game"><a href="#F-Three-Variables-Game" class="headerlink" title=" F - Three Variables Game"></a><a href="https://atcoder.jp/contests/abc166/tasks/abc166_f"> F - Three Variables Game</a></h2><h3 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h3><p>给定三个数$A,B,C$,有三种操作:</p><ul><li>AB: AB 其中一个加一另一个减一</li><li>BC:BC 其中一个加一另一个减一</li><li>AC:AC 其中一个加一另一个减一</li></ul><p>问能否在保证三个数都非负的条件下进行$n$次操作,如果可以输出每次操作加一的那个</p><h3 id="参考源"><a href="#参考源" class="headerlink" title="参考源"></a>参考源</h3><p>代码地址: <a href="https://atcoder.jp/contests/abc166/submissions/12816649">https://atcoder.jp/contests/abc166/submissions/12816649</a></p><p>作者: <a href="https://atcoder.jp/users/jintiandun">jintiandun</a></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>模拟: 优先较小的数加一,如果两数相等,优先下一步要用的数加一</p><h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll ;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">100020</span>;<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">3</span>],p[N],q[N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-built_in">string</span> s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)<span class="hljs-built_in">cin</span> &gt;&gt; v[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; s;<br>        p[i]=s[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;A&#x27;</span>;<br>        q[i]=s[<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(v[p[i]]&gt;v[q[i]])swap(p[i],q[i]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(v[p[i]]==v[q[i]])<br>            <span class="hljs-keyword">if</span>(i&lt;n&amp;&amp;(q[i]==q[i+<span class="hljs-number">1</span>]||q[i]==p[i+<span class="hljs-number">1</span>]))swap(p[i],q[i]);<br>        <span class="hljs-keyword">if</span>(!v[q[i]])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>        v[p[i]]++,v[q[i]]--;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,<span class="hljs-string">&#x27;A&#x27;</span>+p[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>解题报告</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AtCoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
