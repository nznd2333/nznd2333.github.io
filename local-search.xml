<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【解题报告】AtCoder Beginner Contest 177</title>
    <link href="/2021/01/22/%E3%80%90%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A%E3%80%91AtCoder-Beginner-Contest-177/"/>
    <url>/2021/01/22/%E3%80%90%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A%E3%80%91AtCoder-Beginner-Contest-177/</url>
    
    <content type="html"><![CDATA[<h1 id="【解题报告】AtCoder-Beginner-Contest-177"><a href="#【解题报告】AtCoder-Beginner-Contest-177" class="headerlink" title="【解题报告】AtCoder Beginner Contest 177"></a>【解题报告】AtCoder Beginner Contest 177</h1><h2 id="A-Don’t-be-late"><a href="#A-Don’t-be-late" class="headerlink" title="A-Don’t be late"></a><a href="https://atcoder.jp/contests/abc177/tasks/abc177_a">A-Don’t be late</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>以$S$米每秒的速度能否在$T$秒内移动$D$米</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>判断<code>S * T &gt;= D</code>是否为真即可</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> d, t, s;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; d &gt;&gt; t &gt;&gt; s;<br>    <span class="hljs-keyword">if</span> (t * s &gt;= d)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="B-Substring"><a href="#B-Substring" class="headerlink" title="B - Substring"></a><a href="https://atcoder.jp/contests/abc177/tasks/abc177_b">B - Substring</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定字符串$S$和$T$, 至少修改$S$中的多少个字符使得$T$成为$S$的子串</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>依次将$T$与$S$中长度相等的子串进行比较, 求得其中不同的字符的数量, 输出最小的不同字符数量即可</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">string</span> s, t;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-keyword">int</span> len = s.size() - t.size();<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">100000</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; i++) &#123;<br>        <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; t.size(); j++) &#123;<br>            <span class="hljs-keyword">if</span> (t[j] != s[i + j])x++;<br>        &#125;<br>        ans = min(ans, x);<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="C-Sum-of-product-of-pairs"><a href="#C-Sum-of-product-of-pairs" class="headerlink" title="C - Sum of product of pairs"></a><a href="https://atcoder.jp/contests/abc177/tasks/abc177_c">C - Sum of product of pairs</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给定$n$个数, 求这$n$个数两两乘积之和, 并对 $1e9+7$ 取余</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>$ans=\Sigma_{i=2}^n(a_i*\Sigma_{j=1}^{i-1}a_j)$</p><p>边求前缀和, 边求乘积, 中途注意数据范围即可</p><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> a[<span class="hljs-number">200020</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        ans = ans + (a[i] * a[i - <span class="hljs-number">1</span>] % mod);<br>        a[i] += a[i - <span class="hljs-number">1</span>];<br>        a[i] %= mod;<br>        ans %= mod;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="D-Friends"><a href="#D-Friends" class="headerlink" title="D - Friends"></a><a href="https://atcoder.jp/contests/abc177/tasks/abc177_d">D - Friends</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给定$n$个人, $m$对数, 表示$m$对朋友, 朋友的朋友也是朋友, 现在对这$n$个人分组, 分组使得每个小组内的成员互相不是朋友, 最少应该分多少个组</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>维护一个带$Size$的并查集, 输出最大的$Size$即可</p><h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">200020</span>];<br><span class="hljs-keyword">int</span> si[<span class="hljs-number">200020</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ff</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a[x] = a[x] == x ? x : ff(a[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)a[i] = i, si[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">int</span> x, y;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y;<br>        x = ff(x);<br>        y = ff(y);<br>        <span class="hljs-keyword">if</span> (x != y) &#123;<br>            a[y] = x;<br>            si[x] += si[y];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ma = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        ma = max(ma, si[i]);<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ma &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="E-Coprime"><a href="#E-Coprime" class="headerlink" title="E - Coprime"></a><a href="https://atcoder.jp/contests/abc177/tasks/abc177_e">E - Coprime</a></h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>给定$n$个数, 是否满足对于任意$1\le i \le j \le n$都有$GCD(A_i,A_j)=1$, 或$GCD(A_1,A_2,\dots,A_n)=1$</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>依据$GCD(A_1,A_2,\dots,A_n)=GCD(GCD(GCD(A_1,A_2),A_3)\cdots,A_n)$判断$GCD(A_1,A_2,\dots,A_n)=1$是否成立, 若成立, 进一步判断是否满足对于任意$1\le i \le j \le n$都有$GCD(A_i,A_j)=1$, 枚举因子, 判断是否存在一个因子有复数个倍数</p><h3 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">1000010</span>];<br><span class="hljs-keyword">int</span> cnt[<span class="hljs-number">1000010</span>];<br><span class="hljs-keyword">bool</span> flag[<span class="hljs-number">1000010</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> y ? gcd(y, x % y) : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>        cnt[a[i]]++;<br>    &#125;<br>    <span class="hljs-keyword">int</span> x = gcd(a[<span class="hljs-number">1</span>], a[<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>; i &lt;= n; i++) &#123;<br>        x = gcd(x, a[i]);<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not coprime&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">1000000</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (flag[i]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt;= <span class="hljs-number">1000000</span>; j += i) &#123;<br>                t += cnt[j];<br>                flag[j] = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (t &gt; <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;setwise coprime&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pairwise coprime&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="F-I-hate-Shortest-Path-Problem"><a href="#F-I-hate-Shortest-Path-Problem" class="headerlink" title="F - I hate Shortest Path Problem"></a><a href="https://atcoder.jp/contests/abc177/tasks/abc177_f">F - I hate Shortest Path Problem</a></h2><h3 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h3><p>给定一个有$H+1$行$W$列的网格, 可以从每个网格向其下方或者右方移动, 但对于$1$至$H$行的第$A_i$到$B_i$个网格无法向下移动, 求从第1行出发往下移动$k$行所需要的最小移动步数, 若无法到达输出$-1$, 可以从第一行任意网格出发</p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>定义$edge{x,y}$, 表示从第一行第$x$个网格出发, 到达第$y$列的状态, 初始化状态$edge{i,i}$, 此时所需步数均为$0$, 对于所有$y$在区间$[A_i,B_i+1]$的状态方案,仅保留$x$最大的状态, 即删除所有$y$在区间$[A_i,B_i+1]$的状态方案, 然后插入$edge{max{x},B_i+1}$, 最终结果即为$B_i+1-max{x}+i$</p><h3 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">200020</span>], b[<span class="hljs-number">200020</span>];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span><br>    <span class="hljs-keyword">int</span> x, y;<br><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> edge &amp;t) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> y &lt; t.y;<br>    &#125;<br>&#125;;<br><br><span class="hljs-built_in">set</span>&lt;edge&gt; s;<br><span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>&gt; ms;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> h, w;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; h &gt;&gt; w;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= h; i++)<span class="hljs-built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= w; i++) &#123;<br>        s.insert(&#123;i, i&#125;);<br>        ms.insert(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= h; i++) &#123;<br>        <span class="hljs-keyword">int</span> ma = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">auto</span> u = s.lower_bound(&#123;<span class="hljs-number">0</span>, a[i]&#125;);<br>        <span class="hljs-keyword">while</span> (u != s.end() &amp;&amp; u-&gt;y &lt;= b[i] + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">auto</span> v = ms.find(u-&gt;y - u-&gt;x);<br>            ms.erase(v);<br>            ma = max(ma, u-&gt;x);<br>            u = s.erase(u);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ma &gt; <span class="hljs-number">0</span> &amp;&amp; b[i] &lt; w) &#123;<br>            s.insert(&#123;ma, b[i] + <span class="hljs-number">1</span>&#125;);<br>            ms.insert(b[i] + <span class="hljs-number">1</span> - ma);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s.empty()) &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; *(ms.begin()) + i &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>解题报告</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AtCoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【解题报告】AtCoder Beginner Contest 166</title>
    <link href="/2021/01/22/%E3%80%90%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A%E3%80%91AtCoder-Beginner-Contest-166/"/>
    <url>/2021/01/22/%E3%80%90%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A%E3%80%91AtCoder-Beginner-Contest-166/</url>
    
    <content type="html"><![CDATA[<h1 id="【解题报告】AtCoder-Beginner-Contest-166"><a href="#【解题报告】AtCoder-Beginner-Contest-166" class="headerlink" title="【解题报告】AtCoder Beginner Contest 166"></a>【解题报告】AtCoder Beginner Contest 166</h1><h2 id="A-A-C"><a href="#A-A-C" class="headerlink" title="A - A?C"></a><a href="https://atcoder.jp/contests/abc166/tasks/abc166_a">A - A?C</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>输入<code>ABC</code>则输出<code>ARC</code>，输入<code>ARC</code>则输出<code>ABC</code></p><h2 id="B-Trick-or-Treat"><a href="#B-Trick-or-Treat" class="headerlink" title="B - Trick or Treat"></a><a href="https://atcoder.jp/contests/abc166/tasks/abc166_b">B - Trick or Treat</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定$n,k$, 接下来$k$组数据, 每组数据第一行一个数$k_i$表示接下来的一行包含$k_i$个$1$至$n$的数, 统计$1$至$n$之间从未出现的数的个数</p><h2 id="C-Peaks"><a href="#C-Peaks" class="headerlink" title="C - Peaks"></a><a href="https://atcoder.jp/contests/abc166/tasks/abc166_c">C - Peaks</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>有n个天文台, 高度为h, m条路径, 统计符合以下条件的天文台数量: 与该天文台有直接相连的路径的天文台高度均低于它. </p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于一条路径两端的两个天文台, 其中高度较低的一定不需要统计, 故对每条路径排除掉较低的端点, 注意高度相等时两个端点都应该排除</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll ;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> h[N];<br><span class="hljs-keyword">bool</span> flag[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m;<span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">cin</span> &gt;&gt; h[i];<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-keyword">int</span> a,b ;<span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-keyword">if</span>(h[a]==h[b])flag[a]=flag[b]=<span class="hljs-number">1</span>;<br>        flag[h[a]&gt;h[b]?b:a]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(!flag[i])ans++;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="D-I-hate-Factorization"><a href="#D-I-hate-Factorization" class="headerlink" title="D - I hate Factorization"></a><a href="https://atcoder.jp/contests/abc166/tasks/abc166_d">D - I hate Factorization</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>已知$X$, 求一组$A,B$ 满足$A^5-B^5=X$, 解一定存在</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>易知, 当$|A|$越大,$|A-B|$会接近$1$, 注意到$X&lt;10^9$,有$-300&lt;A,B&lt;300$, 因此枚举即可</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll ;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ll x;<span class="hljs-built_in">cin</span> &gt;&gt; x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">-300</span>;i&lt;=<span class="hljs-number">300</span>;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">-300</span>;j&lt;=<span class="hljs-number">300</span>;j++)&#123;<br>            ll m=i*i,n=j*j;<br>            <span class="hljs-keyword">if</span>(m*m*i-n*n*j==x)&#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; j &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="E-This-Message-Will-Self-Destruct-in-5s"><a href="#E-This-Message-Will-Self-Destruct-in-5s" class="headerlink" title="E - This Message Will Self-Destruct in 5s"></a><a href="https://atcoder.jp/contests/abc166/tasks/abc166_e">E - This Message Will Self-Destruct in 5s</a></h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>给定数组$A_i$, 求满足$|i-j|=A_i+A_j$的数对个数</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>设$j&gt;i$, 等式变成$j-A_j=A_i+i$, 统计$j-A_j$个数, 依次加上$A_i+i$的个数即可, 由于要满足$j&gt;i$, 每次需减少一个$i-A_i$ </p><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll ;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">200020</span>;<br><span class="hljs-keyword">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; mp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>        mp[i-a[i]]++;<br>    &#125;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        mp[i-a[i]]--;<br>        ans+=mp[i+a[i]];<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="F-Three-Variables-Game"><a href="#F-Three-Variables-Game" class="headerlink" title=" F - Three Variables Game"></a><a href="https://atcoder.jp/contests/abc166/tasks/abc166_f"> F - Three Variables Game</a></h2><h3 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h3><p>给定三个数$A,B,C$,有三种操作:</p><ul><li>AB: AB 其中一个加一另一个减一</li><li>BC:BC 其中一个加一另一个减一</li><li>AC:AC 其中一个加一另一个减一</li></ul><p>问能否在保证三个数都非负的条件下进行$n$次操作,如果可以输出每次操作加一的那个</p><h3 id="参考源"><a href="#参考源" class="headerlink" title="参考源"></a>参考源</h3><p>代码地址: <a href="https://atcoder.jp/contests/abc166/submissions/12816649">https://atcoder.jp/contests/abc166/submissions/12816649</a></p><p>作者: <a href="https://atcoder.jp/users/jintiandun">jintiandun</a></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>模拟: 优先较小的数加一,如果两数相等,优先下一步要用的数加一</p><h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll ;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">100020</span>;<br><span class="hljs-keyword">int</span> v[<span class="hljs-number">3</span>],p[N],q[N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-built_in">string</span> s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)<span class="hljs-built_in">cin</span> &gt;&gt; v[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; s;<br>        p[i]=s[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;A&#x27;</span>;<br>        q[i]=s[<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(v[p[i]]&gt;v[q[i]])swap(p[i],q[i]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(v[p[i]]==v[q[i]])<br>            <span class="hljs-keyword">if</span>(i&lt;n&amp;&amp;(q[i]==q[i+<span class="hljs-number">1</span>]||q[i]==p[i+<span class="hljs-number">1</span>]))swap(p[i],q[i]);<br>        <span class="hljs-keyword">if</span>(!v[q[i]])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>*<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>        v[p[i]]++,v[q[i]]--;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,<span class="hljs-string">&#x27;A&#x27;</span>+p[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>解题报告</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AtCoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
